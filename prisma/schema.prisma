// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("User")
  profile       Profile?  @relation("UserProfile", fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profileId     String?   @unique @db.ObjectId
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Profile       Profile?
}

model Profile {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  user            User?    @relation("UserProfile")
  userId          String?  @unique @db.ObjectId
  username        String   @unique
  email           String   @unique
  backgroundImage String?
  description     String?
  role            String   @default("User")
  image           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  User            User?    @relation(fields: [userId], references: [id])
}

model TempUser {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  username    String
  password    String
  resendCount Int      @default(0)
  createdAt   DateTime @default(now())
  expires     DateTime
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String?
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
